{"version":3,"sources":["components/Atoms/Title/Title.js","components/Molecules/IntroCard/IntroCard.js","components/Organisms/IntroLayout/IntroLayout.js","hooks/useWebsockets.js","components/Atoms/EmojiSelector/EmojiSelector.js","components/Molecules/EmojiLayout/EmojiLayout.js","components/Atoms/Link/Link.js","components/Atoms/UserSelection/UserSelection.js","components/Atoms/Button/Button.js","components/Molecules/CompareModal/CompareModal.js","components/Atoms/Notification/Notification.js","components/Organisms/MainLayout/MainLayout.js","App.js","serviceWorker.js","index.js"],"names":["Title","styled","h1","_templateObject","props","size","color","CardWrapper","div","IntroCard_templateObject","CardSubtitle","p","_templateObject2","StartButton","button","_templateObject3","IntroCard","_ref","onClick","react_default","a","createElement","Title_Title","Wrapper","IntroLayout_templateObject","EmojiWrapper","IntroLayout_templateObject2","Emoji","span","IntroLayout_templateObject3","IntroLayout","foodCopy","Object","toConsumableArray","data","foods","forEach","food","push","map","index","key","role","aria-label","emoji","Molecules_IntroCard_IntroCard","socket","socketIOClient","useWebsockets","_useState","useState","_useState2","slicedToArray","link","setLink","_useState3","_useState4","foodCount","setFoodCount","_useState5","_useState6","userId","setUserId","_useState7","_useState8","sessionId","setSessionId","_useState9","_useState10","error","setError","useEffect","href","window","location","urlContents","split","length","emit","on","newLink","_ref2","count","setTimeout","addFood","EmojiButton","EmojiSelector_templateObject","EmojiSelector","name","title","ul","EmojiLayout_templateObject","EmojiLayout","EmojiLayout_Wrapper","Atoms_EmojiSelector_EmojiSelector","Link_templateObject","LinkText","label","Link_templateObject2","LinkInput","input","Link_templateObject3","CopyButton","_templateObject4","Link","copied","setCopied","ClipboardJS","text","Link_Wrapper","htmlFor","value","readOnly","className","UserSelection_templateObject","SelectionBox","UserSelection_templateObject2","UserSelection","selections","UserSelection_Wrapper","selection","StyledButton","Button_templateObject","Button","children","Subtitle","h2","CompareModal_templateObject","CompareModal","foodData","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","keys","_foodCount$key$obj","obj","filter","sort","b","reverse","extractDataFromFood","es","options","legend","display","scales","xAxes","ticks","beginAtZero","yAxes","fontSize","Atoms_Button_Button","defaultProps","StyledNotification","Notification_templateObject","Notification","Fragment","MainLayout_templateObject","TopWrapper","MainLayout_templateObject2","InfoWrapper","MainLayout_templateObject3","BottomWrapper","MainLayout_templateObject4","MainLayout","Array","fill","setSelections","compared","setCompared","_useWebsockets","_useWebsockets2","_useWebsockets2$","MainLayout_Wrapper","Atoms_Notification_Notification","Atoms_Link_Link","Molecules_EmojiLayout_EmojiLayout","oldSelections","findIndex","oldSelection","splice","Atoms_UserSelection_UserSelection","Molecules_CompareModal_CompareModal","App","started","setStarted","Organisms_MainLayout_MainLayout","Organisms_IntroLayout_IntroLayout","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a926117a.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Title = styled.h1`\n  font-size: ${props => props.size ? props.size + \"rem\" : \"2rem\"};\n  font-weight: 300;\n  color: ${props => props.color ? props.color : \"black\"}\n`\n\nexport default Title\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\n\nimport { Title } from \"components/Atoms/Title\"\n\nconst CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n  background: rgba(239,121,138, 0.9);\n  text-align: center;\n  border-radius: 4px;\n`\n\nconst CardSubtitle = styled.p`\n  color: white;\n  font-weight: 300;\n  font-size: 2rem;\n  margin: 0;\n`\n\nconst StartButton = styled.button`\n  border: 1px solid white;\n  border-radius: 4px;\n  background-color: transparent;\n  color: white;\n  font-size: 1.5rem;\n  margin: 3.125rem 1rem 1rem 1rem;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:focus {\n    outline-color: #E2DFE0;\n  }\n`\n\nconst IntroCard = ({ onClick }) => {\n  return (\n    <CardWrapper>\n      <Title color=\"white\" size=\"3\">\n        Fastfood\n      </Title>\n      <CardSubtitle>\n        Argue less, eat more\n      </CardSubtitle>\n\n      <StartButton onClick={onClick}>\n        Let's go !\n      </StartButton>\n    </CardWrapper>\n  )\n}\n\nIntroCard.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default IntroCard\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nimport { IntroCard } from \"components/Molecules/IntroCard\"\nimport data from \"data/food.json\"\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`\n\nconst EmojiWrapper = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(7, 1fr);\n  align-items: center;\n  justify-items: center;\n  overflow: hidden;\n`\n\nconst Emoji = styled.span`\n  font-size: 3rem;\n  display: inline-block;\n  animation: scroll 20s infinite linear;\n\n  @keyframes scroll {\n    0% {\n      transform: translateY(0px)\n    }\n    50% {\n      transform: translateY(-500px)\n    }\n    100% {\n      transform: translateY(0px)\n    }\n  }\n`\n\nconst IntroLayout = ({ onClick }) => {\n  const foodCopy = [...data.foods]\n\n  // Add some more emojis to the mix\n  foodCopy.forEach(food => {\n    foodCopy.push(food)\n  })\n\n  return (\n    <Wrapper>\n      <EmojiWrapper>\n        {foodCopy.map((food, index) => <Emoji key={index} role=\"img\" aria-label=\"\">{food.emoji}</Emoji>)}\n      </EmojiWrapper>\n      <IntroCard onClick={onClick} />\n    </Wrapper>\n  )\n}\n\nexport default IntroLayout\n","import { useState, useEffect } from \"react\"\nimport socketIOClient from \"socket.io-client\";\n\nconst socket = socketIOClient(\"https://fastfood-webapp.herokuapp.com/\");\n\n/* eslint-disable */\nconst useWebsockets = () => {\n  const [link, setLink] = useState(\"Fetching link...\")\n  const [foodCount, setFoodCount] = useState()\n  const [userId, setUserId] = useState()\n  const [sessionId, setSessionId] = useState()\n  const [error, setError] = useState()\n\n  // Check if a session exists, if so join it\n  // If not, create one and display its link\n  useEffect(() => {\n    // Check if the URL contains a session ID\n    let { href } = window.location\n    const urlContents = href.split(\"/\")\n    const sessionId = urlContents[urlContents.length - 1]\n\n    if (sessionId === \"\") {\n      socket.emit(\"first-client\")\n      socket.on(\"new-session\", ({ sessionId }) => {\n        let newLink = href += sessionId\n        setUserId(0)\n        setSessionId(sessionId)\n        setLink(newLink)\n      });\n    } else {\n      socket.emit(\"join-session\", sessionId)\n      socket.on(\"session-joined\", ({ userId }) => {\n        setUserId(userId)\n        setSessionId(sessionId)\n        setLink(href)\n      })\n    }\n  }, [])\n\n  const addFood = (food, sessionId, userId) => {\n    socket.emit(\"add-food\", food, sessionId, userId)\n  }\n\n  socket.on(\"food-count-update\", (count) => {\n    setFoodCount(count)\n  })\n\n  /**\n   * On error, store its message and remove it after 3 seconds\n   */\n  socket.on(\"err\", (error) => {\n    setError(error)\n\n    setTimeout(() => {\n      setError(null)\n    }, 3000)\n  })\n\n  return [{ link, userId, sessionId, foodCount, error }, { addFood }]\n}\n\nexport default useWebsockets\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\n\nconst EmojiButton = styled.button`\n  background: rgba(255,255,255, 0.5);\n  text-align: center;\n  padding: 1.5rem;\n  font-size: 1.5rem;\n  border: 1px solid white;\n\n  &:hover {\n    cursor: pointer;\n    opacity: 0.8;\n  }\n\n  &:focus {\n    outline: 1px solid #EF798A;\n  }\n\n  @media (max-width: 1280px) {\n    padding: 0.5rem;\n  }\n`\n\nconst EmojiSelector = ({ name, emoji, onClick }) => {\n  return (\n    <EmojiButton onClick={() => onClick(name, emoji)} title={name}>\n      <span role=\"img\" aria-label={name}>{emoji}</span>\n    </EmojiButton>\n  )\n}\n\nEmojiSelector.propTypes = {\n  name: PropTypes.string.isRequired,\n  emoji: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default EmojiSelector\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nimport { EmojiSelector } from \"components/Atoms/EmojiSelector\"\nimport data from \"data/food.json\"\n\nconst Wrapper = styled.ul`\n  display: grid;\n\tgrid-gap: 10px;\n\tgrid-template-columns: repeat(auto-fit, minmax(80px, 1fr));\n  grid-auto-flow: dense;\n  margin: 0;\n  padding: 0;\n`\n\nconst EmojiLayout = ({ onClick }) => {\n  return (\n    <Wrapper>\n      {data.foods.map(food => <EmojiSelector name={food.name} emoji={food.emoji} key={food.name} onClick={onClick} />)}\n    </Wrapper>\n  )\n}\n\nexport default EmojiLayout\n","import React, { useEffect, useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport ClipboardJS from \"clipboard\"\n\nconst Wrapper = styled.div`\n  padding: 1rem;\n  text-align: center;\n  border-radius: 4px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`\n\nconst LinkText = styled.label`\n  margin-right: 1rem;\n`\n\nconst LinkInput = styled.input`\n  background-color: white;\n  font-size: 1.5rem;\n  border-radius: 4px;\n  border: 1px solid white;\n  padding: 0.25rem;\n  background-color: #EF798A;\n  color: white;\n  box-sizing: content-box;\n  width: 30vw;\n\n  &:focus {\n    outline: transparent;\n  }\n\n  @media (max-width: 769px) {\n    font-size: 1rem;\n    width: 100%;\n  }\n`\n\nconst CopyButton = styled.span`\n  font-size: 1.5rem;\n  margin-left: 0.5rem;\n\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nconst Link = ({ link }) => {\n  const [copied, setCopied] = useState(false)\n\n  useEffect(() => {\n    const clipboard = new ClipboardJS(\".copy-button\", {\n      text() {\n        return link\n      },\n    })\n\n    clipboard.on(\"success\", () => {\n      setCopied(true)\n    })\n  }, [link])\n\n  return (\n    <Wrapper>\n      <LinkText htmlFor=\"link\">Invite anyone to this session with this link:</LinkText>\n      <LinkInput name=\"link\" value={link} readOnly />\n      <CopyButton role=\"img\" aria-label=\"copy to clipboard\" className=\"copy-button\">\n        {copied ? \"✅\" : \"📋\"}\n      </CopyButton>\n    </Wrapper>\n  )\n}\n\nLink.propTypes = {\n  link: PropTypes.string.isRequired\n}\n\nexport default Link\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\n\nconst SelectionBox = styled.input`\n  width: 50px;\n  height: 50px;\n  background-color: white;\n  border: 1px solid white;\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 0.1rem;\n\n  &:focus {\n    outline: transparent;\n  }\n\n  &:hover {\n    cursor: default;\n  }\n`\n\nconst UserSelection = ({ selections }) => {\n  return (\n    <Wrapper>\n      {selections.map((selection, index) => <SelectionBox key={index} value={selection.emoji} readOnly />)}\n    </Wrapper>\n  )\n}\n\nexport default UserSelection\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst StyledButton = styled.button`\n  padding: 1rem;\n  font-size: 1rem;\n  background-color: white;\n  border: 1px solid #EF798A;\n  margin: 0.5rem;\n\n  & > span {\n    font-size: 1.5rem;\n  }\n\n  &:hover {\n    cursor: pointer;\n    opacity: 0.8;\n  }\n\n  &:focus {\n    outline: transparent;\n  }\n`\n\nconst Button = ({ children, onClick }) => {\n  return (\n    <StyledButton onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default Button\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport { HorizontalBar } from \"react-chartjs-2\"\n\nimport \"./CompareModal.css\"\nimport { Button } from \"components/Atoms/Button\"\nimport { Title } from \"components/Atoms/Title\"\n\nconst Subtitle = styled.h2`\n  font-size: 1.5rem;\n  font-weight: 300;\n`\n\n/**\n * Sort and clean the food array\n * @param {*} foodCount\n */\nconst extractDataFromFood = (foodCount) => {\n  const labels = []\n\n  const datasets = [\n    {\n      label: 'Food choices',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      borderColor: 'rgba(255,99,132,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n      hoverBorderColor: 'rgba(255,99,132,1)',\n      data: []\n    }\n  ]\n\n  const keys = Object.keys(foodCount)\n\n  keys.map(key => {\n    if (key === \"\") return null\n\n    const { name, emoji } = foodCount[key].obj\n    return {\n      name,\n      emoji,\n      count: foodCount[key].count\n    }\n  })\n    .filter(food => food)\n    .sort((a, b) => a.count - b.count)\n    .reverse()\n    .forEach(({ name, emoji, count }) => {\n      labels.push(emoji)\n      datasets[0].data.push(count)\n    })\n\n  return {\n    labels,\n    datasets\n  }\n}\n\nconst CompareModal = ({ count, onClick }) => {\n  let foodData = extractDataFromFood(count)\n\n  const options = {\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        ticks: {\n          beginAtZero: true,\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          fontSize: 30\n        }\n      }]\n    }\n  }\n\n  return (\n    <details-dialog>\n      <Title>Vote count</Title>\n      {\n        foodData.labels.length > 0 ?\n          <HorizontalBar\n            data={foodData}\n            options={options}\n          /> :\n          <Subtitle>\n            It seems like nobody has picked any food yet ! <span role=\"img\" aria-label=\"\">🤷‍♂</span>️\n          </Subtitle>\n      }\n      <Button onClick={onClick}>Close</Button>\n    </details-dialog>\n  )\n}\n\nCompareModal.propTypes = {\n  count: PropTypes.object,\n  onClick: PropTypes.func.isRequired,\n}\n\nCompareModal.defaultProps = {\n  count: {},\n}\n\nexport default CompareModal\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst StyledNotification = styled.div`\n  position: fixed;\n  bottom: 1rem;\n  right: 1rem;\n  background-color: #D52941;\n  padding: 1rem;\n  border-radius: 4px;\n  color: white;\n`\n\nconst Notification = ({ error }) => {\n  return (\n    <>\n      {\n        error ?\n          <StyledNotification>\n            {error}\n          </StyledNotification > : null\n      }\n    </>\n  )\n}\n\nexport default Notification\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\nimport useWebsockets from \"hooks/useWebsockets\"\nimport { EmojiLayout } from \"components/Molecules/EmojiLayout\"\nimport { Link } from \"components/Atoms/Link\"\nimport { UserSelection } from \"components/Atoms/UserSelection\"\nimport { Button } from \"components/Atoms/Button\"\nimport { CompareModal } from \"components/Molecules/CompareModal\"\nimport { Notification } from \"components/Atoms/Notification\"\nimport { Title } from \"components/Atoms/Title\"\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\n\nconst TopWrapper = styled.div`\n  padding: 5rem 10rem;\n\n  @media (max-width: 1281px) {\n    padding: 2rem 10rem;\n  }\n\n  @media (max-width: 1024px) {\n    padding-bottom: 10rem;\n  }\n\n  @media (max-width: 769px) {\n    padding: 2rem 1rem 10rem 1rem;\n  }\n`\n\nconst InfoWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  @media (max-width: 1024px) {\n    display: inline-block;\n    text-align: center;\n  }\n`\n\nconst BottomWrapper = styled.div`\n  width: 100%;\n  bottom: 0;\n  text-align: center;\n  margin-top: 1rem;\n\n  @media (max-width: 1024px) {\n    position: fixed;\n    bottom: 0.625rem;\n  }\n`\n\nconst MainLayout = () => {\n  const [selections, setSelections] = useState(Array(4).fill({ name: \"\", emoji: \"\" }))\n  const [compared, setCompared] = useState(false)\n  const [{ link, sessionId, userId, foodCount, error }, { addFood }] = useWebsockets()\n\n  /**\n   * On food click, add an item to our selection array\n   * If the array is full, reset it\n   * @param {*} name\n   * @param {*} emoji\n   */\n  const handleEmoijiClick = (name, emoji) => {\n    setSelections((oldSelections) => {\n      // Find the first empty item\n      let index = oldSelections.findIndex((oldSelection) => oldSelection.name === \"\")\n\n      if (index === -1) {\n        oldSelections = Array(4).fill({ name: \"\", emoji: \"\" })\n        index = 0;\n      }\n      oldSelections.splice(index, 1, { name, emoji })\n      addFood([...oldSelections], sessionId, userId)\n      return [...oldSelections]\n    })\n  }\n\n  return (\n    <Wrapper>\n      <Notification error={error} />\n      <TopWrapper>\n        <InfoWrapper>\n          <Title size=\"1.5\">Pick up to 4 types of food</Title>\n          <Link link={link} />\n        </InfoWrapper>\n        <EmojiLayout onClick={handleEmoijiClick} />\n      </TopWrapper>\n      <BottomWrapper>\n        <UserSelection selections={selections} />\n        <Button onClick={() => setCompared(true)}>\n          See results\n        </Button>\n      </BottomWrapper>\n      {compared ? <CompareModal count={foodCount} onClick={() => setCompared(false)} /> : null}\n    </Wrapper>\n  )\n}\n\nexport default MainLayout\n","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\nimport { IntroLayout } from \"./components/Organisms/IntroLayout\"\nimport { MainLayout } from \"./components/Organisms/MainLayout\"\n\nconst App = () => {\n  const [started, setStarted] = useState(false)\n\n  // On launch, check if the user is coming from a shared URL\n  useEffect(() => {\n    const { href } = window.location\n    const urlContents = href.split(\"/\")\n\n    if (urlContents[urlContents.length - 1] === \"\") return\n\n    setStarted(true)\n  }, [])\n\n  return (\n    <>\n      {\n        !started ?\n          <IntroLayout onClick={() => setStarted(true)} />\n          : <MainLayout />\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}